---
title: 'Cybersecurity Analysis: Network Traffic Data'
author: "Morgan Hamlin"
date: "`r Sys.Date()`"
output:
  pdf_document:
    toc: true
    toc_depth: '2'
  html_document:
    theme: flatly
    highlight: tango
    toc: true
    toc_depth: 2
---

```{r setup, include=FALSE}
library(tidyverse)
library(readr)
library(ggplot2)
library(dplyr)
library(lubridate)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
```
# Introduction:
This report provides an analysis of network traffic data, identifying potential anomalies that could indicate suspicious activity. The analysis includes traffic summaries, anomaly detection, and visualizations to help stakeholders understand the key findings.

The report is structured as follows:

* Summary of Network Traffic: Visualization of top source IP addresses by data volume.
* Anomaly Detection: Identification of suspicious IP addresses based on data volume.
* Additional Visualizations: Further insights into network traffic patterns, including protocol distribution and traffic volume over time.
* Conclusion: Summary of findings and recommendations for next steps.

## Data Import and Preparation
The network traffic data analyzed in this report was originally captured using Wireshark, a popular network protocol analyzer. The data represents a 2-second snapshot of network traffic, saved as a .pcap (Packet Capture) file. This file was then converted into a .csv (Comma-Separated Values) format to facilitate easier analysis in R. 

After conversion, the .csv file was imported into RStudio, where it underwent initial processing to ensure the data was in the correct format for analysis. This included converting the Time field to a numeric format to represent the precise capture times, and categorizing the Protocol field as a factor to allow for categorical analysis. 

### Preview of the data sample:

```{r}
# Import the CSV file (replace 'network_traffic.csv' with your actual file path)
network_data <- read_csv("network_traffic.csv")

# Convert the 'Time' column to a numeric or appropriate time format if needed
network_data <- network_data %>%
  mutate(Time = as.numeric(Time))

# Ensure 'Protocol' is treated as a factor for categorical analysis
network_data <- network_data %>%
  mutate(Protocol = as.factor(Protocol))

# Show a preview of the data
head(network_data)
```
# Summary of Network Traffic
## Top 10 Source IPs by Data Volume
This section visualizes the top 10 source IP addresses by the total data volume they generated. This analysis helps identify the primary origins of traffic within the network, which could indicate normal network activity or potential sources of suspicious activity.

### Explanation
* Purpose: This bar chart helps visualize the source IPs that are responsible for the largest volumes of network traffic. These could represent major servers, clients, or even potential attackers within the network.
* Insights: The color differentiation by protocol helps stakeholders understand what kind of traffic (e.g., HTTP, HTTPS, FTP) is being generated by these sources, providing context for further investigation.
```{r}
# Summarize traffic by Source IP and total bytes
traffic_summary <- network_data %>%
  group_by(Source, Protocol) %>%
  summarise(total_bytes = sum(Length)) %>%
  arrange(desc(total_bytes))

# Display the summary
traffic_summary

# Filter to get the top 10 Source IPs by total data volume
top_sources <- traffic_summary %>%
  group_by(Source) %>%
  summarise(total_bytes = sum(total_bytes)) %>%
  top_n(10, wt = total_bytes)

# Join back with the traffic summary to get data for the plot
top_sources_data <- traffic_summary %>%
  filter(Source %in% top_sources$Source)

# Plot the top 10 Source IP addresses by total data volume
ggplot(top_sources_data, aes(x = reorder(Source, -total_bytes), y = total_bytes, fill = Protocol)) +
  geom_bar(stat = "identity", width = 0.7) +
  scale_fill_brewer(palette = "Set2") +
  labs(title = "Top 10 Source IP Addresses by Data Volume",
       subtitle = "Analysis of Network Traffic by Source IP Address",
       x = "Source IP Address",
       y = "Total Data Volume (Bytes)",
       fill = "Protocol") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        plot.title = element_text(size = 18, face = "bold"),
        plot.subtitle = element_text(size = 14),
        legend.position = "right")

```


```{r}
# Set a threshold for anomaly detection (e.g., Source IPs with total data volume > 500 bytes)
anomaly_threshold <- 500

anomalies <- traffic_summary %>%
  filter(total_bytes > anomaly_threshold)

```
# Anomaly Detection
## Suspicious IPs Based on Data Volume
In this section, we identify IP addresses that have unusually high data volumes, which could indicate suspicious activity such as data exfiltration, DDoS attacks, or other malicious behavior.

### Explanation

* Purpose: By setting a threshold for data volume, this analysis filters out IPs that exceed normal traffic levels, which may indicate an anomaly.
* Insights: The detected IPs should be monitored closely, and additional security measures might be necessary to prevent potential breaches.
```{r, echo=FALSE, results='asis'}
# Display anomalies as a markdown table
knitr::kable(anomalies, col.names = c("Source IP Address", "Protocol", "Total Data Volume (Bytes)"))

```


## Distribution of Packet Lengths by Protocol
This histogram shows the distribution of packet lengths across different protocols. Understanding packet size distribution is crucial for detecting anomalies, as certain types of attacks may generate packets of unusual sizes.

### Explanation
* Purpose: This visualization helps identify the most common packet sizes and can be used to detect abnormal patterns that could suggest network issues or malicious activity.
* Insights: A high concentration of specific packet sizes might indicate normal traffic, while unusual peaks could warrant further investigation.

```{r, fig.width=8, fig.height=5}
# Boxplot of packet lengths by protocol
ggplot(network_data, aes(x = Protocol, y = Length, fill = Protocol)) +
  geom_boxplot() +
  scale_fill_brewer(palette = "Pastel1") +
  labs(title = "Distribution of Packet Lengths by Protocol",
       x = "Protocol",
       y = "Packet Length (Bytes)") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, face = "bold"),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10))
```

## Time Series of Network Traffic Volume
This line chart shows how traffic volume changes over time, segmented by different network protocols. This can reveal patterns such as peak usage times or unusual spikes in traffic.

### Explanation
* Purpose: This time series analysis helps stakeholders see how traffic varies throughout the day or during specific events, allowing them to identify times of high traffic that might correspond with normal operations or potential attacks.
* Insights: Peaks in traffic volume for certain protocols during unexpected times could suggest suspicious activities, such as an ongoing attack or data breach.


```{r}
# Convert 'Time' to a datetime format if it's in seconds or similar format
network_data <- network_data %>%
  mutate(Time = as.POSIXct(Time, origin = "1970-01-01", tz = "UTC"))

# Summarize the total data volume over time
time_series <- network_data %>%
  group_by(Time) %>%
  summarise(total_bytes = sum(Length))

# Line chart of traffic volume over time
ggplot(time_series, aes(x = Time, y = total_bytes)) +
  geom_line(color = "steelblue") +
  labs(title = "Time Series of Network Traffic Volume",
       x = "Time",
       y = "Total Data Volume (Bytes)") +
  theme_minimal() +
  theme(plot.title = element_text(size = 12, face = "bold"),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10))

```



# Additional Visuals
## Heatmap of Traffic Between Source and Destination IPs
```{r}
# Summarize the traffic between Source and Destination IPs
traffic_matrix <- network_data %>%
  group_by(Source, Destination) %>%
  summarise(total_bytes = sum(Length)) %>%
  ungroup()

# Filter to focus on top 10 Source and Destination IPs by total traffic
top_traffic_sources <- traffic_matrix %>%
  group_by(Source) %>%
  summarise(total_traffic = sum(total_bytes)) %>%
  top_n(10, wt = total_traffic) %>%
  pull(Source)

top_traffic_destinations <- traffic_matrix %>%
  group_by(Destination) %>%
  summarise(total_traffic = sum(total_bytes)) %>%
  top_n(10, wt = total_traffic) %>%
  pull(Destination)

traffic_matrix_filtered <- traffic_matrix %>%
  filter(Source %in% top_traffic_sources, Destination %in% top_traffic_destinations)

# Improved heatmap with better readability
ggplot(traffic_matrix_filtered, aes(x = Source, y = Destination, fill = log10(total_bytes))) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkred", name = "Log(Total Bytes)") +
  labs(title = "Heatmap of Traffic Source and Destination IP's",
       x = "Source IP Address",
       y = "Destination IP Address") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        axis.text.y = element_text(size = 10),
        plot.title = element_text(size = 16, face = "bold"))

```


## Distribution of Network Protocol Pie Chart
```{r}
# Count the number of packets per protocol
protocol_distribution <- network_data %>%
  group_by(Protocol) %>%
  summarise(packet_count = n())

# Plot the distribution as a pie chart
ggplot(protocol_distribution, aes(x = "", y = packet_count, fill = Protocol)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  labs(title = "Distribution of Network Protocols",
       fill = "Protocol") +
  theme_minimal() +
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        plot.title = element_text(size = 18, face = "bold"))

```


## Traffic Volume by Hour (Example)

```{r}
# Extract hour from the Time column
network_data <- network_data %>%
  mutate(hour = hour(Time))

# Summarize the total data volume by hour
hourly_summary <- network_data %>%
  group_by(hour) %>%
  summarise(total_bytes = sum(Length))

# Line chart of traffic volume by hour
ggplot(hourly_summary, aes(x = hour, y = total_bytes)) +
  geom_line(color = "darkgreen", size = 1) +
  geom_point(color = "darkgreen", size = 3) +
  labs(title = "Traffic Volume by Hour",
       x = "Hour of the Day",
       y = "Total Data Volume (Bytes)") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, face = "bold"),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10))


```



## Network Traffic Volume by Protocol
```{r}
# Summarize the total data volume over time by protocol
time_series_protocol <- network_data %>%
  group_by(Time, Protocol) %>%
  summarise(total_bytes = sum(Length))

# Line chart of traffic volume over time by protocol
ggplot(time_series_protocol, aes(x = Time, y = total_bytes, color = Protocol)) +
  geom_line(size = 1) +
  labs(title = "Time Series of Network Traffic Volume by Protocol",
       x = "Time",
       y = "Total Data Volume (Bytes)") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, face = "bold"),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        legend.title = element_text(size = 12))

```



## Distribution of Packet Lengths Histogram
```{r}
# Histogram of packet lengths
ggplot(network_data, aes(x = Length, fill = Protocol)) +
  geom_histogram(binwidth = 50, alpha = 0.7, position = "identity") +
  scale_fill_brewer(palette = "Set3") +
  labs(title = "Distribution of Packet Lengths",
       x = "Packet Length (Bytes)",
       y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, face = "bold"))

```


## Bar chart of top 5 Source-Destination pairs by data volume
```{r}
# Summarize traffic by Source and Destination pairs
source_dest_summary <- network_data %>%
  group_by(Source, Destination) %>%
  summarise(total_bytes = sum(Length)) %>%
  arrange(desc(total_bytes)) %>%
  ungroup()

# Ensure only the top 5 source-destination pairs are selected
top_source_dest_pairs <- source_dest_summary %>%
  top_n(5, wt = total_bytes) %>%
  arrange(desc(total_bytes))

# Bar chart of top 5 Source-Destination pairs by data volume
ggplot(top_source_dest_pairs, aes(x = reorder(paste(Source, "->", Destination), -total_bytes), y = total_bytes)) +
  geom_bar(stat = "identity", fill = "steelblue", width = 0.7) +
  labs(title = "Top 5 Source-Destination Pairs by Data Volume",
       x = "Source -> Destination",
       y = "Total Data Volume (Bytes)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        plot.title = element_text(size = 18, face = "bold"))


```


# Conclusion
The analysis of network traffic data has identified key patterns and potential security concerns. The top source IPs by data volume, along with detected anomalies, provide a strong starting point for further investigation. Additionally, the visualizations offer insights into the distribution of packet sizes and traffic patterns over time, helping to pinpoint areas that may require closer scrutiny.

**Recommendations:**

* Monitoring: Increase monitoring of the identified suspicious IP addresses to prevent potential breaches.
* Further Investigation: Conduct deeper analysis on protocols and packet sizes that deviate from the norm.
* Preventative Measures: Implement preventative security measures based on the findings to mitigate future risks.


**Instructions for Use**

* Replace "network_traffic.csv" with the actual path to your CSV file.
* Adjust the anomaly_threshold as per your requirements for detecting anomalies.
* Run this R Markdown file in RStudio to generate an HTML report summarizing the analysis.

*Tip:* Customize the visualization and analysis sections according to the specific patterns or anomalies you’re interested in investigating.
